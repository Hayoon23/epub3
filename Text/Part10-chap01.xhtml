<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>1212</title>
  <link href="../Styles/PY_Ebook_Basic_Style.css" type="text/css" rel="stylesheet"/>
</head>

<body>
  <div class="box1 bg1">
    <h2 class="txt2"><span class="dgray1">0</span><span class="dwhite">1 폴더 및 서브프로그램 활용</span></h2>
  </div>

  <h3 class="section gothic_b f115" id="sigil_toc_id_49"><span class="txtball dwhite">가</span> 프로그램 가독성</h3>

  <p class="txt indent1">최근 가독성 있는 프로그램 작성은 미래 본인이 프로그램을 수정하거나 혹은 타인이 해당 프로그램의 개선 등을 목적으로 해석할 때 업무 효율에 지대한 영향을 미치므로 늘 염두에 두어야 한다. 특히, 큰 프로그램의 경우 몇천 줄 혹은 그 이상이 될 수 있다. 이런 경우 가독성이 좋지 않다면 프로그램 수정 자체에 필요한 시간보다 그 위치를 찾을 때 시간을 허비하기 십상이다.</p>

  <p class="txt indent1">가독성을 높이는 방법은 아래와 같이 일반적으로 사용하는 몇 가지 방법이 있다. 첫째는 코드의 길이를 최대한 줄이는 것이다. 일반적으로 코드의 길이가 짧을수록 가독성은 높아진다. 불필요한 변수를 과하게 많이 선언해 준다거나, 같은 타입의 변수들을 정할 때 여러 줄로 작성하는 등의 습관은 좋지 않다.</p>

  <p class="txt indent1">두 번째는 변수의 이름을 사용하는 의미에 맞추어 작명해야 한다. 예를 들어 폴리스코프에서 ‘웨이포인트’를 생성하면 기본값으로 ‘웨이포인트_1’, ‘웨이포인트_2’ 등으로 생성되는데, 이것을 그대로 활용하면 나중에 각각 어느 지점을 의미하는 것인지 혼란이 발생하게 된다. 이에 따라서 로봇의 오동작 등으로 인해서 프로그램 수정 시 수정 위치를 찾는데 큰 어려움을 겪게 되는 경우가 많다. 비단 웨이포인트뿐만 아니라 각종 I/O, 할당 변수, 플레인 등 거의 대부분 변수에 적절한 작명은 매우 중요하다.</p>

  <p class="txt indent1">마지막으로 이야기하고 싶은 것이 ‘메인 스레드<span class="bracket">(폴리스코프의 로봇프로그램)</span>’를 가능한 한 짧게 구성하고 각 기능을 별도의 함수로 작성하여 호출해 주는 방법이다. 이 방법은 먼저 언급한 전체 코드의 길이를 줄일 수 있을 뿐만 아니라 같은 코드를 재사용할 수 있어서 자주 활용하도록 노력해야 한다.</p>

  <p class="txt indent1">&#60;그림 X-2&#62;은 7장 프로젝트의 구현 예이다. 상기 프로그램은 If 조건문 내부에 다시 If 조건문이 들어가는 형태로 작성되어 있다. 이 경우 상위 If 조건문에 포함된 Else 조건에 대한 동작으로 필요한 ①의 코드와 하위 If 조건문에 포함된 Else 조건에 대한 동작인 ②의 코드는 같다. 폴리스코프에서는 구간을 선택하여 복사하는 기능이 없으므로<span class="bracket">(이 책을 작성하는 시점에는 제공하지 않으나 향후 제공할 수도 있다)</span> 이 부분을 복사하여 사용하려면 여러 차례에 걸쳐 한줄 한줄 복사-붙여넣기 작업이 필요하다. 만약 우리가 작성한 프로그램의 길이가 길다면 이 노력은 그 길이만큼 더 늘어날 것이다. 또한 같은 로봇 동작을 위한 코드나 여러 줄에 걸쳐서 작성되어 있으므로 오랜 시간 이후에 본인이 프로그램을 수정하거나, 다른 작업자가 수정할 때는 프로그램의 이해에 많은 시간이 필요할 것이다. UR의 폴리스코프에는 이러한 목적으로 두 가지 기능을 제공하고 있는데 하나는 ‘폴더<span class="bracket">(Folder)</span>’이고 다른 하나는 ‘서브프로그램<span class="bracket">(Subprogram)</span>’이다.</p>

  <div class="w100 img_center flex_column">
    <img alt="part10-p221-img" src="../Images/part10-p221-img.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 Ⅹ-2&#62;</span> 프로그램 내 중복 코드 작성 예시</p>
  </div>

  <h3 class="section gothic_b f115" id="sigil_toc_id_50"><span class="txtball dwhite">나</span> 폴더</h3>

  <p class="txt indent1">폴리스코프<span class="bracket">(현재 V5.13)</span>에는 다수의 코드를 한꺼번에 선택하여 복사하는 기능이 아직은 없다. 폴리스코프의 ‘폴더’는 두 가지 목적을 가지고 있다. 첫 번째는 상술한 바와 같이 중복으로 활용되는 다수의 줄로 작성된 코드를 묶어서 관리할 수 있다. 이렇게 묶어서 관리하면 유사한 코드를 복사하여 사용할 수 있으므로 프로그램 작성 시간을 크게 줄일 수 있다. 또 다른 목적으로는 폴더로 묶은 코드는 한 줄로 줄여서 나타낼 수 있다. 앞서 이야기했듯이 프로그램의 가독성은 작성된 코드의 길이를 줄이는 것도 도움이 된다. 특히 폴더의 이름을 변경할 수 있는데, 해당하는 기능에 따라 적절히 작명한다면 가독성을 높이는 데 큰 도움이 될 수 있다. &#60;그림 X-3&#62;는 폴리스코프에서 폴더 기능의 사용 예이다. 폴더는 ‘프로그램 탭-일반-폴더’를 선택하여 사용할 수 있다. 폴더를 생성하면 해당 폴더의 기능에 따라서 이름을 변경하도록 하자. 로봇프로그램은 &#60;그림 X-2&#62;에서 로봇의 동작 단계별로 폴더 기능을 적용하여 프로그램의 가독성을 높인 작성 예이다. 기존의 프로그램에 비해서 블록별로 로봇 동작이 어떻게 이루어지고 있는지 더 직관적으로 이해할 수 있게 되었음을 알 수 있다. 특히, 동일한 코드를 사용하는 영역은 단순히 복사 및 붙여넣기만으로 작성이 완료되므로 전체적으로 프로그램 작성 시간도 줄일 수 있다.</p>

  <div class="w70 img_center flex_column">
    <img alt="part10-p222-img" src="../Images/part10-p222-img.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 Ⅹ-3&#62;</span> 폴리스코프에서 ‘폴더’의 사용</p>
  </div>

  <p class="txt indent1">하지만, 다음에 이야기할 ‘서브프로그램’과는 큰 차이가 있는데 그것은 복사하여 활용하는 두 개 이상의 ‘폴더’가 있을 때 하나의 폴더의 코드를 수정하더라도 다른 ‘폴더’의 내용은 연계하여 변경되지 않는다는 점이다. 이 부분은 단점이라기보다는 폴더 기능이 존재하는 이유일 수 있다. 많은 경우 프로그램 작성 시 일부 웨이포인트의 위치 차이 등 매우 적은 부분의 코드 차이로 인해서 ‘서브프로그램’의 적용이 어려운 경우가 많다. 폴더는 복사-붙여넣기 후 수정을 하여도 기존 코드는 변경되지 않기 때문에 유용하게 활용될 수 있는 측면이 있다. 즉, ‘서브프로그램’과 쓰임새의 차이가 있는 것이다.</p>

  <h3 class="section gothic_b f115" id="sigil_toc_id_51"><span class="txtball dwhite">다</span> 서브프로그램</h3>

  <p class="txt indent1">‘서브프로그램’은 중복되는 코드의 활용이 필요할 때 공통된 코드를 하나의 함수로 만들고, 이를 ‘메인 스레드’에 불러와서 사용하기 위한 기능이다. 따라서 앞서 이야기한 ‘폴더’와는 다르게 완전히 중복되는 함수에 적용할 수 있다. ‘서브프로그램’ 사용의 가장 큰 장점은 작성된 코드가 수정이 필요할 경우 ‘서브프로그램’ 자체 함수 하나만 수정하여도 불러서 사용하는 모든 코드가 한꺼번에 적용이 된다는 점이다. 이것은 ‘폴더’와 활용에서 큰 차이가 생긴다.</p>

  <p class="txt indent1">&#60;그림 X-4&#62;은 폴리스코프에서 서브프로그램을 사용하는 방법이다. 서브프로그램은 ‘프로그램 탭-고급-서브프로그램’을 선택하면 된다. 이때 주의해야 하는 점은 커서의 위치이다. 서브프로그램 버튼을 누를 때 ‘로봇 프로그램’를 선택한 상태이면 새로운 서브프로그램이 생성되고, ‘로봇프로그램’ 내부의 특정 공간을 선택한 상태에서 서브프로그램 버튼을 누르면 생성된 서브프로그램을 불어오는 기능이 생성된다. &#60;그림 X-4&#62; (a)는 서브프로그램을 사용하여 중복되는 동작을 간소화한 모습이다. ③ 영역에 생성된 서브프로그램을 확인할 수 있다. &#60;그림 X-4&#62; (b)와 같이 로봇 프로그램 중간 특정 지점에 서브프로그램을 호출하고 우측 명령어 탭의 ② 부분을 통해서 호출한 서브프로그램을 선택할 수 있다. &#60;그림 X-4&#62; (a)의 ④ 영역에는 같은 서브프로그램 2개가 호출된 것을 알 수 있다. 이 두 서브프로그램은 &#60;그림 X-4&#62; (a) 하단에 있는 ③ 역역의 서브프로그램 내용을 수정하면 모두 함께 변경된다.</p>

  <p class="txt indent1">활용에 있어서 주의한 점이 있다. 특히 이미 프로그래밍 경험이 있는 학습자에게 해당하는 이야기이다. C++ 등 일반적인 텍스트 기반 프로그램 언어들은 메인 함수와 그 외부에 생성한 별도의 함수의 변수는 이름이 같더라도 별개의 변수이다. 즉, 메인 함수와 별도의 함수가 같은 변수명을 사용하더라도 두 변수는 독립적으로 동작한다. 하지만 폴리스코프에서 작성된 프로그램이 실제 구동하기 위해서 스크립트<span class="bracket">(Script)</span>로 변환되는 과정을 거치게 되는데, 이때 ‘서브프로그램’의 코드가 메인스레드에 복사되어 작성되어 하나의 프로그램으로 작성이 된다. 이로 인해서 메인스레드와 서브프로그램에 동일한 변수명을 가지면 동일 변수가 된다. 예를 들어 메인스레드와 서브프로그램에 각각 ‘Var_1’이라는 변수가 있다면, 두 개는 동일 변수라는 것이다. 간혹 타 프로그래밍 언어에서의 ‘서브프로그램’의 기능과 혼동하면 오동작을 유발할 수 있으니 유의하여야 한다.</p>

  <p class="txt">&#160;</p>

  <table class="table2-col2">
    <tbody>
      <tr>
        <td>
          <p class="txt tcenter">보충 학습</p>
        </td>
      </tr>

      <tr>
        <td>
          <p class="txt"><span class="gothic_b">로컬 변수(Local variable)</span></p>

          <p class="txt">프로그래밍에서 로컬 변수란 함수나 메소드 내부에서만 사용되는 변수를 말한다. 이 변수는 함수나 메소드(Method)가 호출될 때 생성되고, 종료될 때 소멸하며, 다른 함수나 메소드에서 접근할 수 없으므로 이름이 충돌하는 것을 방지하고 보안 유지에 유리하다. 또한, 스택 영역에 저장되어 초기화되지 않은 상태로 선언된다. 따라서 사용하기 전에 반드시 값을 할당해야 한다. 사용에서의 장점은 메모리 효율성과 코드 가독성을 높일 수 있다는 것이며, 단점은 스코프가 제한적이고 초기화가 필요하다는 것이다.</p>

          <p class="txt">&#160;</p>

          <p class="txt"><span class="gothic_b">전역 변수(Global variable)</span></p>

          <p class="txt">전역 변수는 프로그램의 어느 지역에서나 사용할 수 있는 변수이다. 괄호 안에 쓴 변수가 지역 변수였다면, 괄호 밖에 쓴 변수는 전역 변수이다. 전역 변수로 선언하면 main 함수이든, 기능 테스트 함수이든 이 변수 사용이 가능하다. 프로그램의 시작과 동시에 메모리 공간에 할당되어서 프로그램이 종료될 때까지 존재하며, 지역 변수와는 다르게 별도의 값으로 초기화하지 않으면 0으로 초기화되는 특징이 있다.</p>

          <p class="txt">전역 변수의 장점은 어느 함수에서나 접근과 사용을 할 수 있다는 것이다. 하지만 단점은 코드가 길어지고 프로그램이 복잡해질수록 어떤 함수에서 전역 변수의 값을 바꾸는지 알기 어려워지므로, 이는 프로그램을 유지보수를 어렵게 하는 측면이 있다. 또한 지역 변수와 전역 변수 중에 이름이 같은 변수가 있는 경우에는 지역 변수를 우선하여 접근한다. 이에 따라서 개발자가 의도하지 않았던 결과가 도출되기도 한다. 따라서 꼭 필요한 경우가 아니라면 지역 변수를 사용하는 것을 일반적으로 권장한다.</p>
        </td>
      </tr>
    </tbody>
  </table>

  <p class="txt">&#160;</p>

  <div class="w70 img_center flex_column">
    <img alt="part10-p224-img" src="../Images/part10-p224-img.jpg"/>
  </div>

  <div class="w100 img_center flex_column">
    <img alt="part10-p225-img" src="../Images/part10-p225-img.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 Ⅹ-4&#62;</span> <span class="본문_본문_표_일반 _idGenCharOverride-3">폴리스코프에서 ‘서브프로그램’의 사용</span></p>
  </div>
</body>
</html>