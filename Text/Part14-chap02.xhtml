<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>1212</title>
  <link href="../Styles/PY_Ebook_Basic_Style.css" type="text/css" rel="stylesheet"/>
</head>

<body>
  <div class="box1 bg1">
    <h2 class="txt2"><span class="dgray1">0</span><span class="dwhite">2 유연한 재배치 프로그램 방법</span></h2>
  </div>

  <h3 class="section gothic_b f115" id="sigil_toc_id_75"><span class="txtball dwhite">가</span> 유연한 재배치를 위한 절차</h3>

  <p class="txt indent1">유연한 재배치의 개념은 생각보다 간단하다. 작업공간1을 먼저 가정해서 생각해보자. 지금까지 우리는 작업공간1에 대한 교시를 베이스 좌표계를 기준으로 작성했다. 그러므로 이렇게 교시된 웨이포인트는 베이스 원점을 기준으로 결정되었다. 동작이 로봇이 중심인 것이다. 이 과정을 이제는 작업공간을 기준으로 교시해보고자 한다. &#60;그림 XIV-5&#62;는 유연한 재배치를 위한 순서도이다.</p>

  <p class="txt indent1"><span class="CharOverride-28">[I 단계]</span> 작업공간을 기준으로 교시하기 위해서는 그에 해당하는 좌표계가 필요하다. 이 단계가 &#60;그림 XIV-5&#62;의 ‘Ⅰ’이며, 그 좌표계를 생성하는 방법의 하나가 해당 작업공간에 대한 ‘플레인’을 생성하는 것이다. &#60;그림 XIV-4&#62;의 예를 들자면 작업장1의 좌하단 모서리를 원점으로 하는 새로운 플레인이 그 예가 될 수 있다. 작업공간1을 정의하기 위해서 만든 플레인을 플레인1이라고 하겠다.</p>

  <p class="txt indent1"><span class="CharOverride-28">[II 단계]</span> Ⅱ단계는 로봇 프로그램을 교시하는 단계이다. 여기에서 중요한 것은 이동 명령어의 교시하는 기준을 베이스 좌표계가 아닌 새로 생성한 좌표계인 ‘플레인1’로 설정해 놓는 것이다. 이렇게 설정한 상태에서 교시되는 웨이포인트의 좌표 정보는 선택된 플레인 원점으로부터의 떨어진 거리 및 회전각 정보를 가진다.</p>

  <p class="txt indent1"><span class="CharOverride-28">[III 단계]</span> Ⅲ단계에서 로봇을 구동하면 교시한 대로 동작함을 알 수 있다. 기존의 베이스 기준 프로그램과 비교하면 동작 자체의 차이는 없을지 모르지만, 내부적으로는 로봇이 이동 위치를 결정하기 위한 원점<span class="bracket">(베이스 원점 vs 플레인 원점)</span>이 달라졌고, 각각의 원점에서 떨어진 거리 및 방향을 의미하는 TCP를 위한 웨이포인트 정보<span class="bracket">(베이스 원점으로부터의 이격 vs 플레인 원점으로부터의 이격)</span>가 달라진 것이다.</p>

  <p class="txt indent1"><span class="CharOverride-28">[IV 단계]</span> 이렇게 교시한 프로그램은 작업공간2에서 같은 동작을 수행하게 하는 것은 어렵지 않다. 해당 작업장을 정의할 수 있는 ‘플레인’만을 변경하면 된다. 작업공간2에 대한 새로운 좌표계라고 할 수 있는 플레인을 새로 생성하고, 그 플레인의 이름을 플레인2라고 해보자.</p>

  <p class="txt indent1"><span class="CharOverride-28">[V 단계]</span> 플레인2를 생성하였다면 기존 프로그램에서 이동에 활용한 ‘특징’을 플레인1에서 플레인2만 변경해 준다면 우리는 다른 수고로움없이 새로운 작업공간에서 로봇을 활용할 수 있게 된다.</p>

  <p class="txt indent1"><span class="CharOverride-28">[VI 단계]</span> 이동 명령어의 특징을 새롭게 만든 플레인2로 변경하여 구동하면, 기존 프로그램이 새로운 작업장의 위치에 맞춰서 같은 동작을 수행하는 것을 확인할 수 있다.</p>

  <div class="w60 img_center flex_column">
    <img alt="part14-p295-img1" src="../Images/part14-p295-img1.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 XIV-5&#62;</span> 유연한 재배치를 위한 프로그램 구현 절차</p>
  </div>

  <h3 class="section gothic_b f115" id="sigil_toc_id_76"><span class="txtball dwhite">나</span> 플레인의 생성</h3>

  <p class="txt indent1">상기의 재배치 활용 절차를 위해서 각 작업장에 대한 플레인을 생성하여야 한다. &#60;그림 XIV-6&#62;는 그 플레인을 생성하는 위치로 ‘설치 탭-특징-플레인’을 선택한다. 그러면 &#60;그림 XIV-6&#62; ③과 같이 새로운 플레인이 생성된다. 중앙 상단의 연필 모양 버튼을 눌러 이름을 변경할 수 있다. &#60;그림 XIV-6&#62; ④의 ‘이 플레인 티칭’을 누르면 플레인 생성을 위한 마법사가 실행된다.</p>

  <div class="w100 img_center flex_column">
    <img alt="part14-p295-img2" src="../Images/part14-p295-img2.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 XIV-6&#62;</span> 플레인 설정 위치</p>
  </div>

  <p class="txt indent1">&#60;그림 XIV-7&#62; (a)는 플레인 생성을 위한 마법사 화면으로 전체 6단계로 이루어져 있다. &#60;그림 XIV-7&#62; (a) ①에 보이는 점선 사각형 안 세 개의 정보(<span class="bracket">원점,</span> <span class="bracket">양의</span> <span class="bracket">X축,</span> <span class="bracket">양의</span> <span class="bracket">Y축</span>)를 입력하는 것이 핵심이며, 각 정보의 입력은 &#60;그림 XIV-7&#62; (a) ②, ③, ④에서 이루어진다. 새로운 위치에서의 로봇이 수행하는 동작의 정밀도는 이 단계에서 얼마나 정확하게 작업장의 위치를 정의해 줄 수 있느냐에 달려있다고 할 수 있다. 다시 말하면 두 작업장을 정의할 때의 원점 및 방향을 교시하는 정확한 기준이 있어야 한다는 것이다.</p>

  <p class="txt indent1">&#60;그림 XIV-7&#62; (b)는 이 플레인을 정의하는 작업을 할 때 양의 X축 및 양의 Y축을 교시하는 방법이다. 그림에서 표시된 원점에서 양의 X축이 우측으로 표시된 화살표 방향으로 정의했다면, 양의 Y축은 X축으로 정의가 완료된 지점으로부터 바로 정의하고자 하는 Y축 방향으로 이동해야 한다. 굳이 원점에서 점선의 화살표로 표시된 위치로 이동하여 정의한다면 원하는 플레인을 정의할 수 없을 것이다. 이것은 유니버설로봇社의 폴리스코프를 이용한 정의 방법으로 다른 기업 제품의 경우 다를 수 있다. 이 부분은 각 기업의 매뉴얼을 확인하도록 하자.</p>

  <p class="txt indent1">앞에서 설명한 방법대로 교시를 하였다면 X축은 오른쪽, Y축은 위쪽, Z축은 책을 뚫고 나오는 방향이 될 것이다. 원점 및 X축, Y축이 정의가 되면 &#60;그림 XIV-7&#62; (a) ⑥과 같이 생성된 플레인을 화면에도 확인할 수 있다.</p>

  <div class="w80 img_center flex_column">
    <img alt="part14-p296-img" src="../Images/part14-p296-img.jpg"/>
  </div>

  <div class="w80 img_center flex_column">
    <img alt="part14-p297-img" src="../Images/part14-p297-img.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 XIV-7&#62;</span> 플레인 생성 마법사</p>
  </div>

  <h3 class="section gothic_b f115" id="sigil_toc_id_77"><span class="txtball dwhite">다</span> 플레인의 적용</h3>

  <p class="txt indent1">생성된 플레인의 적용은 &#60;그림 XIV-8&#62;과 같이 이루어진다. &#60;그림 XIV-8&#62; ①의 Move 명령을 선택하면 우측 명령어 탭의 ②에서 특징을 선택하여 생성한 플레인을 선택할 수 있다. 이 선택이 이루어진 이후 ①의 웨이포인트를 교시하면 그 웨이포인트는 ‘플레인_1’을 기준으로 한 이격 정보가 저장된다.</p>

  <p class="txt indent1">로봇이 이동하여 작업장이 변경된다면 그 새로운 작업장에 대한 ‘플레인_2’를 생성하고, 역시 &#60;그림 XIV-8&#62; ②의 특징에 작업장2에 대한 플레인으로 변경하면, 로봇은 새로운 작업장에서도 기존 동작을 잘 수행할 수 있음을 확인할 수 있다.</p>

  <div class="tip_icon3"></div>

  <div class="tipbox3">
    <p class="txt gothic_m">순서에 주의하자. 먼저 플레인을 생성하고, 웨이포인트를 교시하기 전에 Move 명령어의 특징을 변경해야 한다.</p>
  </div>

  <div class="w100 img_center flex_column">
    <img alt="part14-p298-img" src="../Images/part14-p298-img.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 XIV-8&#62;</span> 플레인 적용</p>
  </div>


  <div class="txtbox mt1">
    <p class="txt">1. 유연한 재배치의 필요성 및 산업에서의 활용 예를 설명한다. 특히, 협동로봇의 장점(경량 특성 및 안전 펜 스 불필요)과 연계하여 설명한다.</p>

    <p class="txt">2. 유연한 재배치를 위한 단계별 프로그래밍 절차를 설명한다. 순서가 중요하다.</p>

    <p class="txt">3. 플레인을 생성하는 방법을 설명한다.</p>

    <p class="txt">4. 이동 위치 교시 전 해당 이동 명령의 특징 설정 변경하는 것이 어떤 의미인지를 설명한다. (저장되는 웨이 포인트 좌표 관점으로)</p>

    <p class="txt">5. 플레인 변경에 따른 로봇 동작의 변화와 그 이유를 설명한다.</p>

    <p class="txt">6. 학생들과 함께 로봇 시동 및 종료를 천천히 연습한다.</p>
  </div>

  <p class="txt gothic_b">◉ 실습과제 결과 예시</p>

  <p class="txt gothic_b dblue2">■ 실습과제 구현 예시</p>

  <div class="w30 img_center flex_column">
    <img alt="part14-p299-img" src="../Images/part14-p299-img.jpg"/>
  </div>
</body>
</html>