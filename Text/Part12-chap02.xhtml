<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>1212</title>
  <link href="../Styles/PY_Ebook_Basic_Style.css" type="text/css" rel="stylesheet"/>
</head>

<body>
  <div class="box1 bg1">
    <h2 class="txt2"><span class="dgray1">0</span><span class="dwhite">2 If/Else 고급 활용</span></h2>
  </div>

  <p class="txt indent1">여기에서는 이번 과제 실습 내용을 구현하는 데 필요한 추가적인 응용 기술 요소를 다루려고 한다.</p>

  <h3 class="section gothic_b f115" id="sigil_toc_id_62"><span class="txtball dwhite">가</span> 프로그램 전체 구성 – If/Else 활용</h3>

  <p class="txt indent1">이 프로젝트를 구현하는 방법이 다양하지만, 먼저 우리는 기존에 배웠던 If/Else 함수를 사용하여 구현해 보도록 한다. 이는 폴리스코프에서 활용하는 If의 특별한 사용법의 학습이 필요하기 때문이다. 또한, 실시간 센서 신호 관찰 및 활용이라는 실무에서 아주 흔하게 사용하는 프로그래밍 방법을 학습하기 위해서이다.</p>

  <p class="txt indent1">이번 단원의 실습 과제를 구현하기 위해서는 지속해 실시간 내부 압력 센서의 값이 받고, 그 값이 특정한 값 이상이 되면 포스 모드를 해제하는 동작을 포함한다. &#60;그림 XII-6&#62;은 이번 실습 과제를 구현할 때 연습을 위해서 권장하는 프로그램 구조이다. 제안하는 구조는 프로그램은 크게 3개 부분으로 나눌 수 있다. &#60;그림 XII-6&#62; ① 영역은 실시간으로 관찰한 힘 값을 저장할 목적으로 변수를 생성한 것이다. &#60;그림 XII-6&#62; ② 영역에서는 블록의 적층 과정에서 바닥과 접촉 여부를 판단하고, 닿지 않았을 때 포스 모드로 동작하게 하기 위한 코드가 작성된다. &#60;그림 XII-6&#62; ③ 영역은 스레드를 이용하여 구현하는데, 현재의 값을 지속하여 실시간으로 관찰하기 위한 코드이다.</p>

  <div class="w80 img_center flex_column">
    <img alt="part12-p263-img" src="../Images/part12-p263-img.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 Ⅻ-6&#62;</span> 프로젝트를 위한 프로그램 핵심 구조</p>
  </div>

  <h3 class="section gothic_b f115" id="sigil_toc_id_63"><span class="txtball dwhite">나</span> 변수의 할당</h3>

  <p class="txt indent1">변수는 정보를 저장하기 위한 메모리의 저장 공간이라고 생각하면 편리하다. 지금까지 로봇프로그램을 하면서 우리는 이미 많은 변수를 만나왔는데, 이동에서 사용한 웨이포인트도 이러한 변수 중 하나이다. 다양한 환경 및 사용자가 필요한 조건에 따라서 프로그램이 동작하기 위해서는 필연적으로 그 조건에 해당하는 정보를 어딘가에 저장해야만 하며, 이를 위해서 변수를 사용해야 한다. 이런 변수는 정수, 실수, 문자, 배열 등의 형태가 있다. 폴리스코프에서 이러한 변수를 만드는 명령어가 ‘할당<span class="bracket">(Assignment)</span>’이다. 할당은 &#60;그림 XII-7&#62;과 같이 ‘프로그램 탭-고급-할당’을 클릭하여 사용할 수 있다. 폴리스코프에서는 파이썬 등 최근 개발된 프로그램 언어와 비슷하게 사용자가 변수의 형태를 지정해 주지 않아도 자동적으로 적절히 결정된다. &#60;그림 XII-7&#62; ③과 같이 할당된 변수는 ④에서 적절한 이름을 지어주고 표현식을 클릭하여 값을 넣어주면 된다. 예를 들어 우리는 새로운 변수 하나를 할당하려고 한다. 이 변수에 실시간으로 관찰한 내부 압력 센서의 ‘실숫값’을 저장하려고 한다. 이러한 이유로 변수명을 ‘current_force’로 명명하였다. 또한, 이 값은 숫자이기 때문에 0을 입력하였다. 변수명은 가능한 그 변수의 기능을 고려하여 직관적으로 이해할 수 있게 결정하는 것이 프로그램의 가독성을 높일 수 있어 향후 프로그램 수정 및 유지관리에 유리하다.</p>

  <div class="w100 img_center flex_column">
    <img alt="part12-p264-img" src="../Images/part12-p264-img.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 Ⅻ-7&#62;</span> 변수의 할당</p>
  </div>

  <h3 class="section gothic_b f115" id="sigil_toc_id_64"><span class="txtball dwhite">다</span> 스레드를 활용한 실시간 압력값 관찰</h3>

  <p class="txt indent1">블록을 적층하는 과정에서 바닥에 접촉하는 순간을 인지하기 위해서는 지속적으로 힘 센서에서 측정값을 확인해야 한다. 이러한 이유로 이 과정은 메인 스레드인 ‘로봇프로그램’과는 별개로 병렬 실행이 필요하며, &#60;그림 XII-6&#62; ③처럼 스레드를 적용해야 한다. 스레드를 생성한 후에 우리가 앞서 할당하였던 ‘current_force’ 변수에 힘 센서의 값을 저장해야 하는데, 이때 사용할 수 있는 스크립트 명령어가 ‘force()’이다. &#60;그림 XII-8&#62; <span class="bracket">(a)</span>에 이 명령어를 직접 입력할 수 있다. &#60;그림 XII-8&#62; <span class="bracket">(b)</span>는 스크립트 매뉴얼의 내용으로 이 함수가 뉴턴 단위로 힘 값을 반환함을 알 수 있다. 또한 X, Y, Z 축으로 들어오는 힘의 놈(Norm) 값으로 방향 정보가 포함되지 않음도 확인할 수 있다. ‘force()’와 같이 비교적 사용 빈도가 높은 함수의 경우 스크립트 직접 입력 외에서 &#60;그림 XII-8&#62; <span class="bracket">(a)</span> ③을 클릭하여 선택하여 입력할 수 있다. 아래쪽으로 ‘force()’ 함수가 보인다.</p>

  <div class="tip_icon2"></div>

  <div class="tipbox2">
    <p class="txt gothic_m">놈(Norm)이란 절대값에서 출발하여 추상화된 개념으로 벡터의 길이 혹은 크기를 측정하는 방법이다. Norm이 측정한 벡터의 크기는 원점에서 벡터 좌표까지의 거리 혹은 Magnitude라고 한다.</p>
  </div>

  <div class="w100 img_center flex_column">
    <img alt="part12-p265-img" src="../Images/part12-p265-img.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 Ⅻ-8&#62;</span> 실시간 압력값 관찰</p>
  </div>

  <h3 class="section gothic_b f115" id="sigil_toc_id_65"><span class="txtball dwhite">라</span> if 표현식 계속 점검 모드</h3>

  <p class="txt indent1">앞서 진행한 과정을 통해서 우리는 변수를 할당하였고, 그 변수에 실시간으로 내부 힘 센서값을 0.01초마다 저장하게 하였다. 이제 남은 것은 그 값이 활용하는 부분이다. 이것을 위해서 우리는 If를 사용하려고 한다. &#60;그림 XII-9&#62; ③에서 핵심 코드는 단 3줄이다. 일반으로 교정은 TCP가 공중에 떠 있는 상태에서 이루어지며, 교정이 이루어진 직후 센서의 출력값은 ‘0’이다. 그 상태에서 &#60;그림 XII-9&#62; (a) ① 조건은 ‘참’일 것이다. <span class="bracket">(참이 아니라면 교정 과정을 다시 점검해 보자)</span> 이후 그 하위에 해당하는 코드가 작동하게 되는데, 그림의 예에서는 포스 모드 상태에서 5초 동안 기다리게 되어 있다. 그러므로 이 프로그램은 포스 모드가 ‘5초라는 고정된 시간’동안 작동하다가 해제되는 순서로 동작할 것이다. 하지만, 우리가 이번 실습 과제에서 구현하고자 하는 동작은 ‘바닥과 접촉’하는 순간<span class="bracket">(즉, 시간이 고정되어 있지 않다)</span> 포스 모드가 해제되는 것이므로, 우리가 원하는 동작과는 차이가 있다. 일반적인 프로그래밍의 경우 이 동작을 구현하기 위해서는 While 구조문을 사용해야 한다. While 구조문은 프로그래머가 지정한 조건이 만족할 때까지 반복하는 것으로 짧은 시간 동안 포스 모드를 반복하는 등의 방법으로 원하는 동작을 구현할 수 있다. 폴리스코프에서는 이러한 기능을 보다 사용자가 편리하게 사용할 수 있도록 &#60;그림 XII-9&#62; ③에서와 같이 ‘표현식을 계속 점검함’이라는 체크박스를 기능으로 구현해 놓았다. 이것은 While 구조문을 사용하지 않고도 ‘지속적으로 조건 성립 여부’를 점검할 수 있도록 한다. 즉, 예제 프로그램에서 이 체크박스를 체크하면 포스 모드로 5초간 동작하는 동안 언제라도 ‘current_force &#60; 3’ 조건이 거짓이 되면 내부 수행 동작이 종료된다. 이후에 ‘end_force_mode()’ 스크립트 명령어를 사용하여 포스 모드를 완전히 해제할 수 있다.</p>

  <div class="w100 img_center flex_column">
    <img alt="part12-p266-img" src="../Images/part12-p266-img.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 Ⅻ-9&#62;</span> if의 특별한 활용법 – 표현식 계속 점검 모드</p>
  </div>

  <div class="txtbox number_list mt1">
    <p class="txt">1. 힘 제어의 산업적 활용 및 필요성에 대한 충분히 설명한다.</p>

    <p class="txt">2. 힘 제어 프로그램 개발의 어려움과 템플릿의 필요성과 유용성에 관해서 설명한다.</p>

    <p class="txt">3. 변수 및 변수 할당 방법에 관해서 설명한다.</p>

    <p class="txt">4. 실시간 포스 관찰을 위한 변수 및 스레드의 활용 방법에 관해서 설명한다.</p>

    <p class="txt">5. UR 스크립트에 대한 전반적인 설명 및 이번 실습에 사용하는 스크립트에 관해서 설명한다.</p>

    <p class="txt">6. 특히, zero_ftsensor의 용도 및 사용 시 실무적인 주의점에 관해서 자세히 설명한다.</p>

    <p class="txt">7. IF 구문을 사용시 ‘표현식 계속 점검’ 체크박스에 관해서 설명한다.</p>
  </div>

  <p class="txt gothic_b">◉ 실습과제 결과 예시</p>

  <p class="txt gothic_b dblue2">■실습과제 구현 예시</p>

  <div class="w30 img_center">
    <img alt="part12-p267-img" src="../Images/part12-p267-img.jpg"/>
  </div>
</body>
</html>