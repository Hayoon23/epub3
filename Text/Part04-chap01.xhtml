<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>1212</title>
  <link href="../Styles/PY_Ebook_Basic_Style.css" type="text/css" rel="stylesheet"/>
</head>

<body>
  <div class="box1 bg1">
    <h2 class="txt2"><span class="dgray1">0</span><span class="dwhite">1 스레드(Thread)</span></h2>
  </div>

  <h3 class="section gothic_b f115" id="sigil_toc_id_22"><span class="txtball dwhite">가</span> 픽앤플레이스 동작 비효율 관찰</h3>

  <p class="txt indent1">3장에서 구현한 무한 반복하는 픽앤플레이스 프로그램에 다수의 작업물이 있다면 어떤 문제가 발생할까? &#60;그림 IV-3&#62;에서 그 결과를 확인할 수 있다. 로봇이 좌측에 작업물을 옮기고 나서 컨베이어벨트가 동작하고, 로봇은 이후 이동을 시작한다. 이어서 로봇은 센서에서 작업물의 도착 여부를 감지한다. 이 과정에서 작업물이 다수일 경우 작업물은 미리 도착하지만, 프로그램 구조상 로봇이 지정 위치까지 이동할 때까지는 컨베이어 정지 조건을 확인하지 않으므로 뒤쪽으로 작업물들이 쌓이기 시작한다. 스크래치 등에 민감한 제품의 경우 하자가 발생할 가능성이 생기는 것이다. 시간이 지날수록 점점 더 많은 작업물이 충돌하게 된다.</p>

  <p class="txt indent1">프로그램을 수정하여 작업물의 도착 지점에서 집기 위한 위치로 이동하기 전에 작업물의 도착 여부를 확인하는 방식으로 변경하여 작업물이 쌓이는 문제를 해결할 수 있겠지만, 이 경우에는 작업물이 도착할 때까지 로봇이 이동하지 못하므로 이 경우 역시 시간 손실이 발생하게 되므로 바람직하지 못하다.</p>

  <p class="txt indent1">그러면 이 문제의 궁극적인 이유는 무엇일까? 사람이 작업한다고 생각해보자. 한 사람이 작업한다면 블록을 옮긴 후 컨베이어벨트의 블록을 이동시켜야 할 것이다. 그렇지 않으면 우리 뇌가 두 가지의 동작을 뇌에서 동시에 처리할 수 없기 때문이다. 금방 실수하게 될 것이다. 하지만 두 명의 작업자가 있다면 어떨까? 한 사람은 블록을 옮기고, 다른 한 사람은 컨베이어를 동작시킨다면 어떨까? 그렇다면 로봇과 컨베이어는 각각의 작업자가 개별 제어할 수는 없을까? 컨트롤 박스를 두 명의 작업자가 일하는 것처럼 동작시킬 수 없을까?</p>

  <p class="txt indent1">이 문제는 결국 개별 동작할 수 있는 두 개의 장치<span class="bracket">(로봇과 컨베이어벨트)</span>가 하나의 시퀀스 프로그램으로 작성되어 있으므로 생기는 한계라고 할 수 있다.</p>

  <div class="tip_icon1"></div>

  <div class="tipbox1">
    <p class="txt gothic_m">스레드는 사용 시 주의할 점이 있다. 첫째 과도하게 많은 스레드 활용은 프로세서에 부담을 주어 오히려 문제가 될 수 있다. 두 번째 스레드 사용 시 기다림 함수 등을 추가하여 반복 속도를 제한하여야 한다.</p>
  </div>

  <p class="space-1">&#160;</p>

  <div class="w100 img_center flex_column">
    <img alt="part04-p093-img1" src="../Images/part04-p093-img1.jpg"/>
  </div>

  <div class="img_center flex_column">
    <img class="w30 mcenter" alt="part04-p093-img2" src="../Images/part04-p093-img2.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 Ⅳ-3&#62;</span> 로봇-컨베이어 동기 구현으로 인한 비효율 동작 예시</p>
  </div>

  <h3 class="section gothic_b f115" id="sigil_toc_id_23"><span class="txtball dwhite">나</span> 스레드</h3>

  <p class="txt indent1">스레드<span class="bracket">(Thread)</span>는 어떠한 프로그램 내에서, 특히 프로세스 내에서 실행되는 흐름의 단위를 말한다. 앞서 살펴보았던 예에서 컨베이어와 로봇이 하나의 스레드에 배치되었을 때 어떻게 구현하더라도 다양한 상황에서 최적의 동작을 구현하기는 어렵다. 컨베이어와 로봇이 별개로 상황에 따라 동작할 수 있음에도 불구하고, 동일 스레드에서는 불가능하기 때문이다.</p>

  <p class="txt indent1">&#60;그림 IV-4&#62;는 스레드의 개념도이다. 일반적으로 한 프로그램은 하나의 스레드를 가지고 있지만, 프로그램 개발 환경에 따라 둘 이상의 스레드를 동시에 실행할 수 있다. 이러한 실행 방식을 멀티스레드<span class="bracket">(Multi-Thread)</span>라고 한다. 폴리스코프도 이 멀티스레드를 지원한다. 폴리스코프 실행 시 기본 스레드로 ‘로봇 프로그램’이 생성된다.</p>

  <p class="txt indent1">&#60;그림 IV-4&#62; (b)는 폴리스코프에서 스레드를 추가하는 절차이다. 스레드는 ‘프로그램 탭-고급-스레드’를 선택하면 추가된다. 추가된 스레드 ‘스레드_1’은 ‘로봇프로그램’ 스레드와는 별개의 공간이 같은 레벨로 만들어짐을 확인할 수 있다. 즉, 기본인 ‘로봇프로그램’과 추가된 ‘스레드_1’은 독립적으로 동작하게 된다. 이를 ‘병렬실행<span class="bracket">(Cocurrent)</span>’이라고 한다. 스레드는 필요에 따라서 여러 개를 추가할 수 있다. 이번 실습 과제의 경우를 생각해보자. 로봇과 컨베이어벨트는 별개의 장치로 따로따로 구동하여도 문제가 생기지 않는다. 그러므로 메인스레드에는 로봇을 구동하기 위한 코드를, 추가된 스레드에는 컨베이어벨트를 구동하기 위한 코드를 넣으면 된다.</p>

  <p class="txt indent1">편리하고 효율적으로만 보이는 이 스레드도 사용할 때 몇 가지 주의 사항이 있다. 첫 번째로 너무 많은 스레드는 프로세서에 부담을 가중시켜서 오동작을 유발할 수 있다. 필요 여부를 잘 생각해서 최소한만 추가하도록 하자. 두 번째로 하나 혹은 소수의 스레드를 추가하더라도 제어되지 않는 반복 동작으로 인해서 프로세서의 부담을 줄 수 있다. 예를 들어 특정 센서의 동작 상태를 최대 속도로 확인하는 동작이 대표적인 경우이다. 이러한 문제를 해결하기 위해서 &#60;그림 IV-4&#62; (b)의 ④와 같이 짧은 기다림 함수를 추가하는 것을 추천한다. 예제에서와 같이 0.01초는 사람에게는 엄청나게 짧은 시간일 수 있지만, 컴퓨터 입장에서는 충분히 여유있는 시간이 될 수 있다. 또 다른 주의점으로는 비동기로 동작하는 스레드 간의 명령이 충돌하는 경우이다. 예를 들어 기본 스레드와 추가된 스레드에서 동시에 로봇 이동 명령을 실행시킨다고 생각해보자. 이런 경우 로봇은 에러가 발생하면서 정지하게 되는데, 초보자들이 흔히 하는 실수이므로 주의 깊게 프로그램해야 한다. 이 문제를 최소화하는 방법은 스레드별로 동작하는 장치를 구분해 놓는 것이다. 예를 들어 로봇프로그램에서는 로봇암의 제어 명령만을, 추가된 스레드에는 컨베이어 제어 명령어만을 작성하면 된다.</p>

  <div class="w100 img_center ">
    <img alt="part04-p095-img" src="../Images/part04-p095-img.jpg"/>
  </div>

  <div class="w100 img_center flex_column">
    <img alt="part04-p095-img2" src="../Images/part04-p095-img2.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 Ⅳ-4&#62;</span> 스레드를 이용한 병렬 처리</p>
  </div>
</body>
</html>