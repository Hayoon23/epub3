<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>1212</title>
  <link href="../Styles/PY_Ebook_Basic_Style.css" type="text/css" rel="stylesheet"/>
</head>

<body>
  <div class="box1 bg1">
    <h2 class="txt2"><span class="dgray1">0</span><span class="dwhite">1 유연한 재배치 개요</span></h2>
  </div>

  <h3 class="section gothic_b f115" id="sigil_toc_id_73"><span class="txtball dwhite">가</span> 필요성</h3>

  <p class="txt indent1">기존 산업용 다관절로봇과 비교하였을 때 협동로봇이 가지는 장점은 저렴한 설치 비용, 가벼운 무게, 간편한 사용법 및 대폭 강화된 안전성이다. 이러한 장점은 초대량 생산에서 주로 적용되던 기존 산업용 로봇을 중 · 소량 제조 및 서비스 분야까지 대중화하는 결정적인 요인이 되었다. 특히 일반적인 성인 남성이라면 들 수 있는 가벼운 무게로 인해서 필요에 따라서 이동하면서 활용함으로써 로봇의 활용률을 크게 높일 수 있어 규모가 비교적 작은 기업에서도 도입을 쉽게 결정할 수 있게 되었다.</p>

  <div class="w80 img_center flex_column">
    <img alt="part14-p292-img" src="../Images/part14-p292-img.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 XIV-2&#62;</span> 협동로봇의 특징</p>
  </div>

  <p class="txt indent1">&#60;그림 XIV-3&#62;은 실제 제조 현장에서 로봇을 재배치하여 사용하는 예시 사진이다. 사람과 로봇이 협력하여 생산 제조 활동을 하는 과정에서 협동로봇은 생산에 병목이 발생하는 지점에 빠르게 투입되어 24시간 동작할 수 있다. 이 과정에서 로봇이 변경된 장소에서 필요한 동작을 수행하기 위해서는 교시 작업이 필요하다. 만약 이 과정에서 이미 저장된 프로그램을 사용할 수 있으면 어떨까? 이미 로봇프로그램을 해 본 사람이라면 알겠지만, 정확히 원래의 위치로 로봇을 위치시키지 못한다면 다시 모든 웨이포인트 정보를 입력해야 할 필요성을 이해할 것이다.</p>

  <div class="w80 img_center flex_column">
    <img alt="part14-p293-img" src="../Images/part14-p293-img.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 XIV-3&#62;</span> 로봇을 재배치하여 활용하는 예</p>
  </div>

  <h3 class="section gothic_b f115" id="sigil_toc_id_74"><span class="txtball dwhite">나</span> 좌표계 측면에서의 유연한 재배치</h3>

  <p class="txt indent1">&#60;그림 XIV-4&#62;은 로봇의 교시에 있어서 좌표계의 관점에서 이해하기 위한 것이다. 여기에 작업공간1 및 작업공간2가 있다. 두 공간은 같은 형태지만 다른 위치에 있다. 지금까지 우리는 로봇을 교시할 때 이동 명령의 내부 설정 내용인 ‘특징’을 기본값인 ‘Base 조인트’로 사용하였다. 그 결과 교시한 웨이포인트는 모두 베이스 좌표계를 기준에서의 떨어진 거리 및 회전각 정보인 X, Y, Z, RX, RY, RZ 값으로 저장되었다. 베이스 좌표계에 관한 부분은 2장의 내용을 참조하기를 바란다. 결과적으로 작업공간1에서 베이스 좌표계 기준으로 교시를 수행한 프로그램을 작업공간2에 적용하기 위해서는 로봇 프로그램의 전 동작 구간에서 허용 범위 오차 내로 동작할 수 있게 ‘정확히’ 같은 위치에 로봇을 이동 배치하면 가능하다. 하지만 실제 상황에서 그것이 매우 어려운 일인 것을 알게 될 것이다. 이것은 X, Y 평면 위치뿐만 아니라 높이에 해당하는 Z축 및 각 축마다의 회전 각도까지 정확히 맞춰야 하기 때문이다. 간단한 동작이라면 다시 프로그래밍하면 되겠지만, 동작이 복잡하여 프로그램의 길이가 길다면 로봇을 이동하여 사용하는 것은 프로그램 구현에 필요한 시간 때문에 오히려 비생산적일 수 있다. 이러한 경우에 활용할 수 있는 방법이 유연한 재배치 기술이다.</p>

  <div class="w70 img_center flex_column">
    <img alt="part14-p293-img2" src="../Images/part14-p293-img2.jpg"/> 

    <p class="imgcaption"><span class="gothic_b dblue">&#60;그림 XIV-4&#62;</span> 로봇의 재배치에 따른 좌표계 변동</p>
  </div>
</body>
</html>